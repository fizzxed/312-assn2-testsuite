let
  val g : [one :: nat, two :: <one :: nat, two :: nat -> nat>] =
        in[one :: nat, two :: <one :: nat, two :: nat -> nat >]{two}(
                              <one = z, two = fn (x : nat) s(s(x))>
        )
in
  case g {
    one x : nat => s(x)
  | two <one= _ : nat, two = g : nat -> nat> => g z
  }
end
